// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LegalEazeRewrite.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240808094526_identityrole2")]
    partial class identityrole2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LegalEazeRewrite.Models.DataModels.Client", b =>
                {
                    b.Property<string>("ClientID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientID");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("LegalEazeRewrite.Models.DataModels.Court", b =>
                {
                    b.Property<string>("CourtID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourtID");

                    b.ToTable("Courts");
                });

            modelBuilder.Entity("LegalEazeRewrite.Models.DataModels.LawFirm", b =>
                {
                    b.Property<string>("LawFirmID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LawFirmID");

                    b.ToTable("LawFirms");
                });

            modelBuilder.Entity("LegalEazeRewrite.Models.DataModels.Lawyer", b =>
                {
                    b.Property<string>("LawyerID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LawFirmID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LawyerID");

                    b.HasIndex("LawFirmID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Lawyers");
                });

            modelBuilder.Entity("LegalEazeRewrite.Models.DataModels.LawyerClient", b =>
                {
                    b.Property<string>("LawyerID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClientID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LawyerID", "ClientID");

                    b.HasIndex("ClientID");

                    b.ToTable("LawyerClients");
                });

            modelBuilder.Entity("LegalEazeRewrite.Models.DataModels.LawyerManager", b =>
                {
                    b.Property<string>("LawyerID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ManagerID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LawyerID", "ManagerID");

                    b.HasIndex("ManagerID");

                    b.ToTable("LawyerManagers");
                });

            modelBuilder.Entity("LegalEazeRewrite.Models.DataModels.Manager", b =>
                {
                    b.Property<string>("ManagerID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LawFirmID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ManagerID");

                    b.HasIndex("LawFirmID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("LegalEazeRewrite.Models.DataModels.Matter", b =>
                {
                    b.Property<string>("MatterID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClientID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourtID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MatterID");

                    b.HasIndex("ClientID");

                    b.HasIndex("CourtID");

                    b.ToTable("Matters");
                });

            modelBuilder.Entity("LegalEazeRewrite.Models.DataModels.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LegalEazeRewrite.Models.DataModels.Lawyer", b =>
                {
                    b.HasOne("LegalEazeRewrite.Models.DataModels.LawFirm", "LawFirm")
                        .WithMany("Lawyers")
                        .HasForeignKey("LawFirmID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LegalEazeRewrite.Models.DataModels.User", "User")
                        .WithOne("Lawyer")
                        .HasForeignKey("LegalEazeRewrite.Models.DataModels.Lawyer", "UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("LawFirm");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LegalEazeRewrite.Models.DataModels.LawyerClient", b =>
                {
                    b.HasOne("LegalEazeRewrite.Models.DataModels.Client", "Client")
                        .WithMany("LawyerClients")
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LegalEazeRewrite.Models.DataModels.Lawyer", "Lawyer")
                        .WithMany("LawyerClients")
                        .HasForeignKey("LawyerID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Lawyer");
                });

            modelBuilder.Entity("LegalEazeRewrite.Models.DataModels.LawyerManager", b =>
                {
                    b.HasOne("LegalEazeRewrite.Models.DataModels.Lawyer", "Lawyer")
                        .WithMany("LawyerManagers")
                        .HasForeignKey("LawyerID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LegalEazeRewrite.Models.DataModels.Manager", "Manager")
                        .WithMany("LawyerManagers")
                        .HasForeignKey("ManagerID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Lawyer");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("LegalEazeRewrite.Models.DataModels.Manager", b =>
                {
                    b.HasOne("LegalEazeRewrite.Models.DataModels.LawFirm", "LawFirm")
                        .WithMany("Managers")
                        .HasForeignKey("LawFirmID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LegalEazeRewrite.Models.DataModels.User", "User")
                        .WithOne("Manager")
                        .HasForeignKey("LegalEazeRewrite.Models.DataModels.Manager", "UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("LawFirm");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LegalEazeRewrite.Models.DataModels.Matter", b =>
                {
                    b.HasOne("LegalEazeRewrite.Models.DataModels.Client", "Client")
                        .WithMany("Matters")
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LegalEazeRewrite.Models.DataModels.Court", "Court")
                        .WithMany("Matters")
                        .HasForeignKey("CourtID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Court");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("LegalEazeRewrite.Models.DataModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("LegalEazeRewrite.Models.DataModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LegalEazeRewrite.Models.DataModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("LegalEazeRewrite.Models.DataModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LegalEazeRewrite.Models.DataModels.Client", b =>
                {
                    b.Navigation("LawyerClients");

                    b.Navigation("Matters");
                });

            modelBuilder.Entity("LegalEazeRewrite.Models.DataModels.Court", b =>
                {
                    b.Navigation("Matters");
                });

            modelBuilder.Entity("LegalEazeRewrite.Models.DataModels.LawFirm", b =>
                {
                    b.Navigation("Lawyers");

                    b.Navigation("Managers");
                });

            modelBuilder.Entity("LegalEazeRewrite.Models.DataModels.Lawyer", b =>
                {
                    b.Navigation("LawyerClients");

                    b.Navigation("LawyerManagers");
                });

            modelBuilder.Entity("LegalEazeRewrite.Models.DataModels.Manager", b =>
                {
                    b.Navigation("LawyerManagers");
                });

            modelBuilder.Entity("LegalEazeRewrite.Models.DataModels.User", b =>
                {
                    b.Navigation("Lawyer")
                        .IsRequired();

                    b.Navigation("Manager")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
